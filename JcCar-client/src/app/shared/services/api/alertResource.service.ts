import { Format, DateUtil } from './../../utils/date-util';
/**
 * ALERTA API
 * SMS - Módulo Alertas de SMS que tem como objetivo comunicar aos interessados deliberações das
 * Agências Reguladoras e eventos de segurança relevantes para que as medidas necessárias sejam tomadas
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { Alert } from '../model/alert';
import { PageAlertProjection } from '../model/pageAlertProjection';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class AlertResourceService {

  protected basePath = 'https://localhost:8585/alert-api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string,
  @Optional() configuration: Configuration) {
      if (basePath) {
          this.basePath = basePath;
      }
      if (configuration) {
          this.configuration = configuration;
          this.configuration.accessToken = localStorage.getItem('token');
          this.basePath = basePath || configuration.basePath || this.basePath;
      }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
          return true;
      }
    }
    return false;
  }


  /**
   * Create a new application
   *
   * @param alert alert
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createAlert(alert: Alert, observe?: 'body', reportProgress?: boolean): Observable<Alert>;
  public createAlert(alert: Alert, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Alert>>;
  public createAlert(alert: Alert, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Alert>>;
  public createAlert(alert: Alert, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (alert === null || alert === undefined) {
        throw new Error('Required parameter alert was null or undefined when calling createAlert.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
        '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Alert>(`${this.basePath}/alerts`,
        alert,
        {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    );
  }

  /**
   * Delete a existing alert
   *
   * @param codigo codigo
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteAlertById(codigo: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteAlertById(codigo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteAlertById(codigo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteAlertById(codigo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (codigo === null || codigo === undefined) {
        throw new Error('Required parameter codigo was null or undefined when calling deleteAlertById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
        '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];

    return this.httpClient.delete<any>(`${this.basePath}/alerts/${encodeURIComponent(String(codigo))}`,
        {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    );
  }

  /**
   * Recovery application by id
   *
   * @param codigo codigo
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findAlertById(codigo: number, observe?: 'body', reportProgress?: boolean): Observable<Alert>;
  public findAlertById(codigo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Alert>>;
  public findAlertById(codigo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Alert>>;
  public findAlertById(codigo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (codigo === null || codigo === undefined) {
        throw new Error('Required parameter codigo was null or undefined when calling findAlertById.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
        '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];

    return this.httpClient.get<Alert>(`${this.basePath}/alerts/${encodeURIComponent(String(codigo))}`,
        {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    );
  }

  /**
   * View a list of available of alerts
   *
   * @param originId
   * @param originName
   * @param originDescription
   * @param statusId
   * @param statusDescription
   * @param codeAlert
   * @param codeOccurrence
   * @param description
   * @param alertClass
   * @param creationDate
   * @param responsedDate
   * @param company
   * @param comprehensiveness
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page.
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending.
   * Multiple sort criteria are supported.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public searchAlerts(originId?: number, originName?: string, originDescription?: string, statusId?: number,
      statusDescription?: string, codeAlert?: string, codeOccurrence?: string, description?: string, alertClass?: number,
      creationDate?: Date, responsedDate?: string, company?: string, comprehensiveness?: boolean, page?: string, size?: string,
      sort?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageAlertProjection>;
  public searchAlerts(originId?: number, originName?: string, originDescription?: string, statusId?: number,
      statusDescription?: string, codeAlert?: string, codeOccurrence?: string, description?: string, alertClass?: number,
      creationDate?: Date, responsedDate?: string, company?: string, comprehensiveness?: boolean, page?: string, size?: string,
      sort?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageAlertProjection>>;
  public searchAlerts(originId?: number, originName?: string, originDescription?: string, statusId?: number,
      statusDescription?: string, codeAlert?: string, codeOccurrence?: string, description?: string, alertClass?: number,
      creationDate?: Date, responsedDate?: string, company?: string, comprehensiveness?: boolean, page?: string, size?: string,
      sort?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageAlertProjection>>;
  public searchAlerts(originId?: number, originName?: string, originDescription?: string, statusId?: number,
      statusDescription?: string, codeAlert?: string, codeOccurrence?: string, description?: string, alertClass?: number,
      creationDate?: any, responsedDate?: string, company?: string, comprehensiveness?: boolean, page?: string, size?: string,
      sort?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (originId !== undefined) {
        queryParameters = queryParameters.set('origin.id', <any>originId);
    }
    if (originName !== undefined) {
        queryParameters = queryParameters.set('origin', <any>originName);
    }
    if (originDescription !== undefined) {
        queryParameters = queryParameters.set('origin.description', <any>originDescription);
    }
    if (statusId !== undefined) {
        queryParameters = queryParameters.set('status.id', <any>statusId);
    }
    if (statusDescription !== undefined) {
        queryParameters = queryParameters.set('status.description', <any>statusDescription);
    }
    if (codeAlert !== undefined) {
        queryParameters = queryParameters.set('codeAlert', <any>codeAlert);
    }
    if (codeOccurrence !== undefined) {
        queryParameters = queryParameters.set('codeOccurrence', <any>codeOccurrence);
    }
    if (description !== undefined) {
        queryParameters = queryParameters.set('description', <any>description);
    }
    if (alertClass !== undefined) {
        queryParameters = queryParameters.set('alertClass', <any>alertClass);
    }

    if (creationDate && creationDate === 'Sem filtro') {
      creationDate = undefined;
    }
    if (creationDate !== undefined) {
      queryParameters = queryParameters.set('creationDate', <any> creationDate);
    }

    if (responsedDate && responsedDate === 'Sem filtro') {
      responsedDate = undefined;
    }
    if (responsedDate !== undefined) {
        queryParameters = queryParameters.set('responsedDate', <any>responsedDate);
    }

    if (company !== undefined) {
        queryParameters = queryParameters.set('company', <any>company);
    }
    if (comprehensiveness !== undefined) {
        queryParameters = queryParameters.set('comprehensiveness', <any>comprehensiveness);
    }
    if (page !== undefined) {
        queryParameters = queryParameters.set('page', <any>page);
    }
    if (size !== undefined) {
        queryParameters = queryParameters.set('size', <any>size);
    }
    if (sort) {
        sort.forEach((element) => {
            queryParameters = queryParameters.append('sort', <any>element);
        });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
        '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];

    return this.httpClient.get<PageAlertProjection>(`${this.basePath}/alerts`,
        {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    );
  }

  /**
   * Update a existing application
   *
   * @param codigo codigo
   * @param alert alert
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateAlert(codigo: number, alert: Alert, observe?: 'body', reportProgress?: boolean): Observable<Alert>;
  public updateAlert(codigo: number, alert: Alert, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Alert>>;
  public updateAlert(codigo: number, alert: Alert, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Alert>>;
  public updateAlert(codigo: number, alert: Alert, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
    if (codigo === null || codigo === undefined) {
        throw new Error('Required parameter codigo was null or undefined when calling updateAlert.');
    }
    if (alert === null || alert === undefined) {
        throw new Error('Required parameter alert was null or undefined when calling updateAlert.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = [
        '*/*'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
        headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<Alert>(`${this.basePath}/alerts/${encodeURIComponent(String(codigo))}`,
        alert,
        {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    );
  }
}
