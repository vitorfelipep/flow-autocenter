/**
 * ALERTA API
 * SMS - Módulo Alertas de SMS que tem como objetivo comunicar aos interessados deliberações das
 * Agências Reguladoras e eventos de segurança relevantes para que as medidas necessárias sejam tomadas
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { EvaluationEffectivenessActionPlan } from '../model/evaluationEffectivenessActionPlan';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class ScopeActionPlanService {
  protected basePath = 'https://localhost:8585/alert-api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional()
    @Inject(BASE_PATH)
    basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Create a new EvaluationEffectivenessActionPlan
   *
   * @param evaluationEffectivenessActionPlan evaluationEffectivenessActionPlan
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createEvaluationEffectivenessActionPlan(
    evaluationEffectivenessActionPlan: EvaluationEffectivenessActionPlan,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<EvaluationEffectivenessActionPlan>;
  public createEvaluationEffectivenessActionPlan(
    evaluationEffectivenessActionPlan: EvaluationEffectivenessActionPlan,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<EvaluationEffectivenessActionPlan>>;
  public createEvaluationEffectivenessActionPlan(
    evaluationEffectivenessActionPlan: EvaluationEffectivenessActionPlan,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<EvaluationEffectivenessActionPlan>>;
  public createEvaluationEffectivenessActionPlan(
    evaluationEffectivenessActionPlan: EvaluationEffectivenessActionPlan,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (
      evaluationEffectivenessActionPlan === null ||
      evaluationEffectivenessActionPlan === undefined
    ) {
      throw new Error(
        'Required parameter evaluationEffectivenessActionPlan was null or undefined when' +
          'calling createEvaluationEffectivenessActionPlan.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<EvaluationEffectivenessActionPlan>(
      `${this.basePath}/evaluations`,
      evaluationEffectivenessActionPlan,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Recovery evaluation by id
   *
   * @param code code
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findEvaluationActionPlantById(
    code: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<EvaluationEffectivenessActionPlan>;
  public findEvaluationActionPlantById(
    code: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<EvaluationEffectivenessActionPlan>>;
  public findEvaluationActionPlantById(
    code: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<EvaluationEffectivenessActionPlan>>;
  public findEvaluationActionPlantById(
    code: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (code === null || code === undefined) {
      throw new Error(
        'Required parameter code was null or undefined when calling findEvaluationActionPlantById.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<EvaluationEffectivenessActionPlan>(
      `${this.basePath}/evaluations/${encodeURIComponent(String(code))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Recovery evaluation by action plan id
   *
   * @param code code
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findEvaluationByActionPlanId(
    code: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<EvaluationEffectivenessActionPlan>;
  public findEvaluationByActionPlanId(
    code: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<EvaluationEffectivenessActionPlan>>;
  public findEvaluationByActionPlanId(
    code: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<EvaluationEffectivenessActionPlan>>;
  public findEvaluationByActionPlanId(
    code: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (code === null || code === undefined) {
      throw new Error(
        'Required parameter code was null or undefined when calling findEvaluationByActionPlanId.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];

    return this.httpClient.get<EvaluationEffectivenessActionPlan>(
      `${this.basePath}/evaluations/action-plan/${encodeURIComponent(
        String(code)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Update a existing application
   *
   * @param codigo codigo
   * @param evaluation evaluation
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateEvaluation(
    codigo: number,
    evaluation: EvaluationEffectivenessActionPlan,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<EvaluationEffectivenessActionPlan>;
  public updateEvaluation(
    codigo: number,
    evaluation: EvaluationEffectivenessActionPlan,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<EvaluationEffectivenessActionPlan>>;
  public updateEvaluation(
    codigo: number,
    evaluation: EvaluationEffectivenessActionPlan,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<EvaluationEffectivenessActionPlan>>;
  public updateEvaluation(
    codigo: number,
    evaluation: EvaluationEffectivenessActionPlan,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (codigo === null || codigo === undefined) {
      throw new Error(
        'Required parameter codigo was null or undefined when calling updateEvaluation.'
      );
    }
    if (evaluation === null || evaluation === undefined) {
      throw new Error(
        'Required parameter evaluation was null or undefined when calling updateEvaluation.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<EvaluationEffectivenessActionPlan>(
      `${this.basePath}/evaluations/${encodeURIComponent(String(codigo))}`,
      evaluation,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }
}
