/**
 * ALERTA API
 * SMS - Módulo Alertas de SMS que tem como objetivo comunicar aos interessados deliberações das Agências Reguladoras
 * e eventos de segurança relevantes para que as medidas necessárias sejam tomadas
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { AlertInvolved } from '../model/alertInvolved';
import { AlertInvolvedDto } from '../model/alertInvolvedDto';
import { PageAlertInvolvedProjection } from '../model/pageAlertInvolvedProjection';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class InvolvedsResourceService {

    protected basePath = 'https://localhost:8585/alert-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * atualizar
     *
     * @param codigo codigo
     * @param alert alert
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(codigo: number, alert: AlertInvolved, observe?: 'body',
    reportProgress?: boolean): Observable<AlertInvolved>;
    public update(codigo: number, alert: AlertInvolved, observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<AlertInvolved>>;
    public update(codigo: number, alert: AlertInvolved, observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<AlertInvolved>>;
    public update(codigo: number, alert: AlertInvolved, observe: any = 'body',
    reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling atualizarUsingPUT.');
        }
        if (alert === null || alert === undefined) {
            throw new Error('Required parameter alert was null or undefined when calling atualizarUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<AlertInvolved>(`${this.basePath}/involveds/${encodeURIComponent(String(codigo))}`,
            alert,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * buscarPorId
     *
     * @param codigo codigo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById(codigo: number, observe?: 'body', reportProgress?: boolean): Observable<AlertInvolvedDto>;
    public findById(codigo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AlertInvolvedDto>>;
    public findById(codigo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AlertInvolvedDto>>;
    public findById(codigo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling buscarPorIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<AlertInvolvedDto>(`${this.basePath}/involveds/${encodeURIComponent(String(codigo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pesquisar
     *
     * @param userKey
     * @param registeredDate
     * @param viewed
     * @param comprehensiveness
     * @param company
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchAll(userKey?: string, registeredDate?: Date, viewed?: boolean,
      comprehensiveness?: boolean, company?: string, observe?: 'body', reportProgress?: boolean): Observable<PageAlertInvolvedProjection>;
    public searchAll(userKey?: string, registeredDate?: Date, viewed?: boolean,
      comprehensiveness?: boolean, company?: string, observe?: 'response', reportProgress?: boolean):
      Observable<HttpResponse<PageAlertInvolvedProjection>>;
    public searchAll(userKey?: string, registeredDate?: Date, viewed?: boolean,
      comprehensiveness?: boolean, company?: string, observe?: 'events', reportProgress?: boolean):
      Observable<HttpEvent<PageAlertInvolvedProjection>>;
    public searchAll(userKey?: string, registeredDate?: Date, viewed?: boolean,
      comprehensiveness?: boolean, company?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userKey !== undefined) {
            queryParameters = queryParameters.set('userKey', <any>userKey);
        }
        if (registeredDate !== undefined) {
            queryParameters = queryParameters.set('registeredDate', <any>registeredDate.toISOString());
        }
        if (viewed !== undefined) {
            queryParameters = queryParameters.set('viewed', <any>viewed);
        }
        if (comprehensiveness !== undefined) {
            queryParameters = queryParameters.set('comprehensiveness', <any>comprehensiveness);
        }
        if (company !== undefined) {
            queryParameters = queryParameters.set('company', <any>company);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PageAlertInvolvedProjection>(`${this.basePath}/involveds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
