/**
 * ALERTA API
 * SMS - Módulo Alertas de SMS que tem como objetivo comunicar aos interessados deliberações das
 * Agências Reguladoras e eventos de segurança relevantes para que as medidas necessárias sejam tomadas
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { ComprehensiveEvaluation } from '../model/comprehensiveEvaluation';
import { PageEvaluationComprehensivenessProjection } from '../model/pageEvaluationComprehensivenessProjection';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class ScopeEvaluationService {

    protected basePath = 'https://localhost:8585/alert-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient,
        @Optional()@Inject(BASE_PATH) basePath: string,
        @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new EvaluationComprehension
     *
     * @param comprehensiveness comprehensiveness
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEvaluationComprehension(comprehensiveness: ComprehensiveEvaluation, observe?: 'body',
    reportProgress?: boolean): Observable<ComprehensiveEvaluation>;
    public createEvaluationComprehension(comprehensiveness: ComprehensiveEvaluation, observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ComprehensiveEvaluation>>;
    public createEvaluationComprehension(comprehensiveness: ComprehensiveEvaluation, observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ComprehensiveEvaluation>>;
    public createEvaluationComprehension(comprehensiveness: ComprehensiveEvaluation, observe: any = 'body',
    reportProgress: boolean = false ): Observable<any> {
        if (comprehensiveness === null || comprehensiveness === undefined) {
            throw new Error('Required parameter comprehensiveness was null or undefined when calling createEvaluationComprehension.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ComprehensiveEvaluation>(`${this.basePath}/comprehensiveness-evaluations`,
            comprehensiveness,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a existing EvaluationComprehension
     *
     * @param codigo codigo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEvaluationComprehension(codigo: number, observe?: 'body',
    reportProgress?: boolean): Observable<any>;
    public deleteEvaluationComprehension(codigo: number, observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEvaluationComprehension(codigo: number, observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEvaluationComprehension(codigo: number, observe: any = 'body',
    reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling deleteEvaluationComprehension.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/comprehensiveness-evaluations/${encodeURIComponent(String(codigo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recovery EvaluationComprehension by id
     *
     * @param codigo codigo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findComprehensionById(codigo: number, observe?: 'body', reportProgress?: boolean):
        Observable<ComprehensiveEvaluation>;
    public findComprehensionById(codigo: number, observe?: 'response', reportProgress?: boolean):
        Observable<HttpResponse<ComprehensiveEvaluation>>;
    public findComprehensionById(codigo: number, observe?: 'events', reportProgress?: boolean):
        Observable<HttpEvent<ComprehensiveEvaluation>>;
    public findComprehensionById(codigo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling findComprehensionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.
          get<ComprehensiveEvaluation>(`${this.basePath}/comprehensiveness-evaluations/${encodeURIComponent(String(codigo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View a list of available of evaluation-comprehensivens
     *
     * @param id
     * @param justify
     * @param company
     * @param appraiser
     * @param dateEvaluation
     * @param idInvolved
     * @param page Results page you want to retrieve (0..N)
     * @param size Number of records per page.
     * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending.
     * Multiple sort criteria are supported.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchAll(id?: number, justify?: string, company?: string, appraiser?: string,
        dateEvaluation?: Date, idInvolved?: number, page?: string, size?: string, sort?: Array<string>,
        observe?: 'body', reportProgress?: boolean): Observable<PageEvaluationComprehensivenessProjection>;
    public searchAll(id?: number, justify?: string, company?: string, appraiser?: string,
        dateEvaluation?: Date, idInvolved?: number, page?: string, size?: string, sort?: Array<string>,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageEvaluationComprehensivenessProjection>>;
    public searchAll(id?: number, justify?: string, company?: string, appraiser?: string,
        dateEvaluation?: Date, idInvolved?: number, page?: string, size?: string, sort?: Array<string>,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageEvaluationComprehensivenessProjection>>;
    public searchAll(id?: number, justify?: string, company?: string, appraiser?: string,
        dateEvaluation?: Date, idInvolved?: number, page?: string, size?: string, sort?: Array<string>,
        observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (justify !== undefined) {
            queryParameters = queryParameters.set('justify', <any>justify);
        }
        if (company !== undefined) {
            queryParameters = queryParameters.set('company', <any>company);
        }
        if (appraiser !== undefined) {
            queryParameters = queryParameters.set('appraiser', <any>appraiser);
        }
        if (dateEvaluation !== undefined) {
            queryParameters = queryParameters.set('dateEvaluation', <any>dateEvaluation.toISOString());
        }
        if (idInvolved !== undefined) {
            queryParameters = queryParameters.set('idInvolved', <any>idInvolved);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters = queryParameters.append('sort', <any>element);
            });
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<PageEvaluationComprehensivenessProjection>(`${this.basePath}/comprehensiveness-evaluations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a existing EvaluationComprehension
     *
     * @param codigo codigo
     * @param comprehensiveness comprehensiveness
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEvaluationComprehension(codigo: number, comprehensiveness: ComprehensiveEvaluation,
        observe?: 'body', reportProgress?: boolean): Observable<ComprehensiveEvaluation>;
    public updateEvaluationComprehension(codigo: number, comprehensiveness: ComprehensiveEvaluation,
        observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ComprehensiveEvaluation>>;
    public updateEvaluationComprehension(codigo: number, comprehensiveness: ComprehensiveEvaluation,
        observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ComprehensiveEvaluation>>;
    public updateEvaluationComprehension(codigo: number, comprehensiveness: ComprehensiveEvaluation,
        observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

            if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling updateEvaluationComprehension.');
        }
        if (comprehensiveness === null || comprehensiveness === undefined) {
            throw new Error('Required parameter comprehensiveness was null or undefined when calling updateEvaluationComprehension.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient
          .put<ComprehensiveEvaluation>(`${this.basePath}/comprehensiveness-evaluations/${encodeURIComponent(String(codigo))}`,
            comprehensiveness,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
