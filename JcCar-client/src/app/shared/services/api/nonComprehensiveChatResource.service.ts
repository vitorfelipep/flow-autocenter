/**
 * ALERTA API
 * SMS - Módulo Alertas de SMS que tem como objetivo comunicar aos interessados deliberações das
 * Agências Reguladoras e eventos de segurança relevantes para que as medidas necessárias sejam tomadas
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { ChatEvaluationComprehension } from '../model/chatEvaluationComprehension';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class NonComprehensiveChatResourceService {

    protected basePath = 'https://localhost:8585/alert-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new ChatEvaluationComprehension
     *
     * @param chatComprehensiveness chatComprehensiveness
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createChatEvaluationComprehension(chatComprehensiveness: ChatEvaluationComprehension,
      observe?: 'body', reportProgress?: boolean): Observable<ChatEvaluationComprehension>;
    public createChatEvaluationComprehension(chatComprehensiveness: ChatEvaluationComprehension,
      observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChatEvaluationComprehension>>;
    public createChatEvaluationComprehension(chatComprehensiveness: ChatEvaluationComprehension,
      observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChatEvaluationComprehension>>;
    public createChatEvaluationComprehension(chatComprehensiveness: ChatEvaluationComprehension,
      observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (chatComprehensiveness === null || chatComprehensiveness === undefined) {
          throw new Error('Required parameter chatComprehensiveness was null or undefined when calling createChatEvaluationComprehension.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ChatEvaluationComprehension>(`${this.basePath}/chat-not-comprehensiveness`,
            chatComprehensiveness,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a existing ChatEvaluationComprehension
     *
     * @param codigo codigo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteChatComprehensivenessSaved(codigo: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteChatComprehensivenessSaved(codigo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteChatComprehensivenessSaved(codigo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteChatComprehensivenessSaved(codigo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling deleteChatComprehensivenessSaved.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/chat-not-comprehensiveness/${encodeURIComponent(String(codigo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recovery ChatEvaluationComprehension by id
     *
     * @param codigo codigo
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findChatComprehensionById(codigo: number, observe?: 'body',
    reportProgress?: boolean): Observable<ChatEvaluationComprehension>;
    public findChatComprehensionById(codigo: number, observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ChatEvaluationComprehension>>;
    public findChatComprehensionById(codigo: number, observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ChatEvaluationComprehension>>;
    public findChatComprehensionById(codigo: number, observe: any = 'body',
    reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling findChatComprehensionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient
          .get<ChatEvaluationComprehension>(`${this.basePath}/chat-not-comprehensiveness/${encodeURIComponent(String(codigo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * View a list of available of chat-evaluation-comprehensivens
     *
     * @param to
     * @param from
     * @param codeInvolved
     * @param codeAlert
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchAll(to?: string, from?: string, codeInvolved?: number, codeAlert?: number, observe?: 'body',
    reportProgress?: boolean): Observable<Array<ChatEvaluationComprehension>>;
    public searchAll(to?: string, from?: string, codeInvolved?: number, codeAlert?: number, observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Array<ChatEvaluationComprehension>>>;
    public searchAll(to?: string, from?: string, codeInvolved?: number, codeAlert?: number, observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Array<ChatEvaluationComprehension>>>;
    public searchAll(to?: string, from?: string, codeInvolved?: number, codeAlert?: number, observe: any = 'body',
    reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        // if (to !== undefined) {
        //     queryParameters = queryParameters.set('to', <any>to);
        // }
        // if (from !== undefined) {
        //     queryParameters = queryParameters.set('from', <any>from);
        // }
        if (codeInvolved !== undefined) {
            queryParameters = queryParameters.set('codeInvolved', <any>codeInvolved);
        }
        if (codeAlert !== undefined) {
            queryParameters = queryParameters.set('codeAlert', <any>codeAlert);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ChatEvaluationComprehension>>(`${this.basePath}/chat-not-comprehensiveness`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a existing ChatEvaluationComprehension
     *
     * @param codigo codigo
     * @param chatComprehensiveness chatComprehensiveness
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateChatEvaluationComprehension(codigo: number, chatComprehensiveness: ChatEvaluationComprehension,
      observe?: 'body', reportProgress?: boolean): Observable<ChatEvaluationComprehension>;
    public updateChatEvaluationComprehension(codigo: number, chatComprehensiveness: ChatEvaluationComprehension,
      observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChatEvaluationComprehension>>;
    public updateChatEvaluationComprehension(codigo: number, chatComprehensiveness: ChatEvaluationComprehension,
      observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChatEvaluationComprehension>>;
    public updateChatEvaluationComprehension(codigo: number, chatComprehensiveness: ChatEvaluationComprehension,
      observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (codigo === null || codigo === undefined) {
            throw new Error('Required parameter codigo was null or undefined when calling updateChatEvaluationComprehension.');
        }
        if (chatComprehensiveness === null || chatComprehensiveness === undefined) {
          throw new Error('Required parameter chatComprehensiveness was null or undefined when calling updateChatEvaluationComprehension.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient
        .put<ChatEvaluationComprehension>(`${this.basePath}/chat-not-comprehensiveness/${encodeURIComponent(String(codigo))}`,
            chatComprehensiveness,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
