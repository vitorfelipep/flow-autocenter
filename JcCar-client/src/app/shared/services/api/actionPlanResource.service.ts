/**
 * ALERTA API
 * SMS - Módulo Alertas de SMS que tem como objetivo comunicar aos interessados deliberações das
 * Agências Reguladoras e eventos de segurança relevantes para que as medidas necessárias sejam tomadas
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent } from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { ActionPlan } from '../model/actionPlan';
import { PageActionPlanProjection } from '../model/pageActionPlanProjection';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class ActionPlanResourceService {

  protected basePath = 'https://localhost:8585/alert-api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string,
  @Optional() configuration: Configuration) {
      if (basePath) {
          this.basePath = basePath;
      }
      if (configuration) {
          this.configuration = configuration;
          this.basePath = basePath || configuration.basePath || this.basePath;
      }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
        if (form === consume) {
            return true;
        }
    }
    return false;
  }


  /**
   * Delete a existing ActionPlan
   *
   * @param codigo codigo
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteActionPlanById(codigo: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deleteActionPlanById(codigo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deleteActionPlanById(codigo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deleteActionPlanById(codigo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (codigo === null || codigo === undefined) {
          throw new Error('Required parameter codigo was null or undefined when calling deleteActionPlanById.');
      }

      let headers = this.defaultHeaders;

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          '*/*'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];

      return this.httpClient.delete<any>(`${this.basePath}/action-plans/${encodeURIComponent(String(codigo))}`,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * View a list of available of ActionPlanProjection
   *
   * @param id
   * @param idInvolved
   * @param registeredDate
   * @param endDate
   * @param causaRaiz
   * @param createdBy
   * @param status
   * @param page Results page you want to retrieve (0..N)
   * @param size Number of records per page.
   * @param sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending.
   * Multiple sort criteria are supported.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public searchActionPlanProjection(id?: number, idInvolved?: number, registeredDate?: string, endDate?: string,
    causaRaiz?: string, createdBy?: string, status?: string, page?: string, size?: string, sort?: Array<string>,
    observe?: 'body', reportProgress?: boolean): Observable<PageActionPlanProjection>;
  public searchActionPlanProjection(id?: number, idInvolved?: number, registeredDate?: string, endDate?: string,
    causaRaiz?: string, createdBy?: string, status?: string, page?: string, size?: string, sort?: Array<string>,
    observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageActionPlanProjection>>;
  public searchActionPlanProjection(id?: number, idInvolved?: number, registeredDate?: string, endDate?: string,
    causaRaiz?: string, createdBy?: string, status?: string, page?: string, size?: string, sort?: Array<string>,
    observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageActionPlanProjection>>;
  public searchActionPlanProjection(id?: number, idInvolved?: number, registeredDate?: string, endDate?: string,
    causaRaiz?: string, createdBy?: string, status?: string, page?: string, size?: string, sort?: Array<string>,
    observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

      let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
      if (id !== undefined) {
          queryParameters = queryParameters.set('id', <any>id);
      }
      if (idInvolved !== undefined) {
          queryParameters = queryParameters.set('idInvolved', <any>idInvolved);
      }
      if (registeredDate !== undefined) {
          queryParameters = queryParameters.set('registeredDate', <any>registeredDate);
      }
      if (endDate !== undefined) {
          queryParameters = queryParameters.set('endDate', <any>endDate);
      }
      if (causaRaiz !== undefined) {
          queryParameters = queryParameters.set('causaRaiz', <any>causaRaiz);
      }
      if (createdBy !== undefined) {
          queryParameters = queryParameters.set('createdBy', <any>createdBy);
      }
      if (status !== undefined) {
          queryParameters = queryParameters.set('status', <any>status);
      }
      if (page !== undefined) {
          queryParameters = queryParameters.set('page', <any>page);
      }
      if (size !== undefined) {
          queryParameters = queryParameters.set('size', <any>size);
      }
      if (sort) {
        sort.forEach((element) => {
            queryParameters = queryParameters.append('sort', <any>element);
        });
      }

      let headers = this.defaultHeaders;

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          '*/*'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];

      return this.httpClient.get<PageActionPlanProjection>(`${this.basePath}/action-plans`,
          {
              params: queryParameters,
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * Update a existing ActionPlan
   *
   * @param codigo codigo
   * @param actionPlan actionPlan
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateActionPlan(codigo: number, actionPlan: ActionPlan, observe?: 'body', reportProgress?: boolean): Observable<ActionPlan>;
  public updateActionPlan(codigo: number, actionPlan: ActionPlan, observe?: 'response', reportProgress?: boolean):
  Observable<HttpResponse<ActionPlan>>;
  public updateActionPlan(codigo: number, actionPlan: ActionPlan, observe?: 'events', reportProgress?: boolean):
  Observable<HttpEvent<ActionPlan>>;
  public updateActionPlan(codigo: number, actionPlan: ActionPlan, observe: any = 'body', reportProgress: boolean = false ):
  Observable<any> {
      if (codigo === null || codigo === undefined) {
          throw new Error('Required parameter codigo was null or undefined when calling updateActionPlan.');
      }
      if (actionPlan === null || actionPlan === undefined) {
          throw new Error('Required parameter actionPlan was null or undefined when calling updateActionPlan.');
      }

      let headers = this.defaultHeaders;

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          '*/*'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];
      const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
      if (httpContentTypeSelected !== undefined) {
          headers = headers.set('Content-Type', httpContentTypeSelected);
      }

      return this.httpClient.put<ActionPlan>(`${this.basePath}/action-plans/${encodeURIComponent(String(codigo))}`,
          actionPlan,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }
}
